//test {
//    reports {
//        junitXml.enabled = false
//        html.enabled = true
//    }
//}
plugins {
  id "org.sonarqube" version "2.6.2"
  id "jacoco"
  id "java"
  id "idea"
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'jacoco'

    repositories {
        jcenter()
    }

    jacoco {
        toolVersion = '0.8.1'
    }
}

subprojects {
    dependencies {
        testCompile 'junit:junit:4.11'
    }

    jacocoTestReport {
        additionalSourceDirs = files(sourceSets.main.allSource.srcDirs)
        sourceDirectories = files(sourceSets.main.allSource.srcDirs)
        classDirectories =  files(sourceSets.main.output)
        reports {
            html.enabled = true
            xml.enabled = true
            csv.enabled = false
        }
    }
}

task jacocoRootReport(type: org.gradle.testing.jacoco.tasks.JacocoReport) {
    dependsOn = subprojects.test
    additionalSourceDirs = files(subprojects.sourceSets.main.allSource.srcDirs)
    sourceDirectories = files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories = files(subprojects.sourceSets.main.output)
    executionData = files(subprojects.jacocoTestReport.executionData)
    reports {
        html.enabled = true
        xml.enabled = true
        csv.enabled = false
    }
    onlyIf = {
        true
    }
    doFirst {
        executionData = files(executionData.findAll {
            it.exists()
        })
    }
    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it,
                    exclude: [
                        'org/opencps/frontend/web/admin/**',
                        'org/opencps/jasper/message/**',
                        'org/opencps/api/digitalsignature/model/**'
                    ])
        })
    }
}

task aggregateUnitTests() {
    doFirst {
        new File(buildDir, 'unit_test_results').mkdirs()
    }
    doLast() {
        subprojects.each { s ->
//            println "project " + s.getName()
//            println s.getPath()
            File unitTestReport = new File(s.buildDir.getPath() + '/reports/tests/test/index.html')
            println unitTestReport
            if (unitTestReport.isFile()) {
                println 'Test File Exists'
                copy {
                    from unitTestReport
                    into buildDir.getPath() + "/unit_test_results"
                    rename('index.html', s.getName() + "_index.html")
                }
            } else {
                println 'Test File Does Not Exist'
            }
        }
    }
}
